package com.ubtechinc.alpha;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.net.wifi.WifiConfiguration;import android.os.Bundle;import android.os.PowerManager;import android.support.annotation.NonNull;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import com.ubtech.utilcode.utils.CloseUtils;import com.ubtech.utilcode.utils.JsonUtils;import com.ubtech.utilcode.utils.LogUtils;import com.ubtechinc.alpha.JimuCarTest;import com.ubtechinc.alpha.app.AlphaApplication;import com.ubtechinc.alpha.appmanager.FaceDetectManager;import com.ubtechinc.alpha.appmanager.FirstStartManager;import com.ubtechinc.alpha.appmanager.LowPowerShutdowmManager;import com.ubtechinc.alpha.appmanager.SysStatusManager;import com.ubtechinc.alpha.appmanager.UbtBatteryManager;import com.ubtechinc.alpha.appmanager.UpgradeClient;import com.ubtechinc.alpha.download.FileDownload;import com.ubtechinc.alpha.key.BroadcastAction;import com.ubtechinc.alpha.network.business.AddPhoto;import com.ubtechinc.alpha.network.business.FindJoke;import com.ubtechinc.alpha.network.module.AddPhotoModule;import com.ubtechinc.alpha.network.module.CheckBindRobotModule;import com.ubtechinc.alpha.network.module.FindJokeModule;import com.ubtechinc.alpha.robotinfo.RobotState;import com.ubtechinc.alpha.service.sysevent.SysEventService;import com.ubtechinc.alpha.utils.AlphaUtils;import com.ubtechinc.alpha.utils.Constants;import com.ubtechinc.alpha.utils.EyesControlUtils;import com.ubtechinc.alpha.utils.SpeechUtils;import com.ubtechinc.alpha.utils.SystemPropertiesUtils;import com.ubtechinc.bluetoothrobot.BleNetworkWifiManager;import com.ubtechinc.nets.ResponseListener;import com.ubtechinc.nets.http.HttpProxy;import com.ubtechinc.nets.http.ThrowableWrapper;import com.ubtechinc.services.alphamini.R;import com.ubtrobot.action.ActionApi;import com.ubtrobot.commons.Priority;import com.ubtrobot.master.Master;import com.ubtrobot.master.context.ContextRunnable;import com.ubtrobot.master.param.ProtoParam;import com.ubtrobot.masterevent.protos.RobotGestures;import com.ubtrobot.masterevent.protos.SysMasterEvent;import com.ubtrobot.mini.libs.behaviors.Behavior;import com.ubtrobot.mini.libs.behaviors.BehaviorInflater;import com.ubtrobot.mini.libs.behaviors.BehaviorLoadListener;import com.ubtrobot.mini.libs.scenes.EmotionStore;import com.ubtrobot.mini.voice.VoiceListener;import com.ubtrobot.mini.voice.VoicePool;import com.ubtrobot.motion.protos.Motion;import com.ubtrobot.motor.MotorApi;import com.ubtrobot.motor.MotorServiceException;import com.ubtrobot.speech.SpeechApi;import com.ubtrobot.sys.SysApi;import com.ubtrobot.transport.message.CallException;import com.ubtrobot.transport.message.Param;import com.ubtrobot.upgrade.DetectException;import com.ubtrobot.upgrade.FirmwarePackageGroup;import java.io.File;import java.io.InputStream;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.Arrays;import java.util.List;import java.util.Random;import ubtechinc.com.standupsdk.StandUpApi;public class MainActivity extends Activity {    private static final String TAG = "MainActivity";    FileDownload fileDownload;    int index = 0;    String[] urls = new String[]{            "http://qunying.jb51.net:81/201312/tools/wifilocating(jb51.net).apk",            "http://c003x.52xumi.com/lol/wxqhbsq_1171.apk",            "http://qunying.jb51.net:81/201312/tools/wifilocating(jb51.net).apk"    };    String[] actions = new String[]{            "1482310201686001", "1482310201686002", "1482310201686003", "1482310201686004",            "1482310201686005", "1482310201686006", "1482310201686007", "1482310201686008",            "1482310201686009", "1482310201686010"    };    private String URL = urls[index];    private int i = 0;    private Button button1;    private Button button2;    private TextView mSeailNumberTv;    private PowerManager powerManager;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mSeailNumberTv = findViewById(R.id.seail_number_tv);        powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);    }    public void motorMoveAbsAngle(View view) {        try {            MotorApi.get().reset(new com.ubtrobot.commons.ResponseListener<Boolean>() {                @Override                public void onResponseSuccess(Boolean aBoolean) {                }                @Override                public void onFailure(int i, @NonNull String s) {                }            });        } catch (MotorServiceException e) {            e.printStackTrace();        }        //        MotorApi.get().lockAllMotor();        //        MotorApi.get().unlockAllMotor();        //        MotorApi.get().moveToAbsoluteAngle(1, 100, 100);        //        int angle = MotorApi.get().readAbsoluteAngle(1, false);        //        MotorApi.get().moveToAbsoluteAngle(1, angle - 100, 1000);    }    public void sendRaket(View view) {        sendBroadcast(new Intent(BroadcastAction.TOUCH_DOWN_BROADCAST));    }    public void gotoSleep(View view) {        try {            Class clazz = Class.forName("android.os.PowerManager");            Method[] methods = powerManager.getClass().getDeclaredMethods();            Log.i(TAG, "methods====" + Arrays.toString(methods));            Method gotoSleepMethod = null;            for (Method method : methods) {                if (method.getName().equals("goToSleep") && method.getGenericParameterTypes().length == 3) {                    gotoSleepMethod = method;                    Log.i(TAG, "gotoSleepMethod====" + gotoSleepMethod);                }            }//            Method goToSleepMethod = powerManager.getClass().getDeclaredMethod("goToSleep", Long.class,Integer.class,Integer.class);            if (null != gotoSleepMethod) {                Log.d(TAG, " goToSleepMethod -- pBoolean 1 : ");                try {                    gotoSleepMethod.invoke(powerManager, 1000 * 5, 0, 0);                } catch (IllegalAccessException e) {                    e.printStackTrace();                } catch (InvocationTargetException e) {                    e.printStackTrace();                }            }        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }    public void heighDorngousAction(View view) {        try {            boolean isUnSafeAction = ActionApi.get().unsafeAction("高危-后倒爬起");            Log.i(TAG, "isUnSafeAction=============" + isUnSafeAction);        } catch (CallException e) {            e.printStackTrace();        }        ActionApi.get().playAction("高危-后倒爬起", new com.ubtrobot.commons.ResponseListener<Void>() {            @Override            public void onResponseSuccess(Void aVoid) {            }            @Override            public void onFailure(int i, @NonNull String s) {            }        });        try {            boolean isSafeAction = ActionApi.get().unsafeAction();            Log.i(TAG, "isSafeAction===========" + isSafeAction);        } catch (CallException e) {            e.printStackTrace();        }    }    public void getSleepTime(View view) {        long time = AlphaUtils.getSystemSleepTime();        Log.i(TAG, "time======" + time);        AlphaUtils.playBehavior("charge_0002", Priority.HIGH, null);    }    public void getBatteryInfo(View view) {        SysMasterEvent.BatteryStatusData batteryStatusData =                UbtBatteryManager.getInstance().getBatteryInfo();        Log.i(TAG, "batteryStatusData=========="                + batteryStatusData.getLevel()                + ";;getLevelStatus====="                + batteryStatusData.getLevelStatus()                + ";;;Status====="                + batteryStatusData.getStatus());    }    public void setOnMouthLed(View view) {    }    public void intoLowPower(View view) {        Master.get().execute(SysEventService.class, new ContextRunnable<SysEventService>() {            @Override            public void run(SysEventService sysEventService) {                Param param = ProtoParam.create(SysMasterEvent.BatteryStatusData.newBuilder()                        .setLevel(18)                        .setLevelStatus(0)                        .setStatus(0)                        .build());                sysEventService.lowPowerStatus(param);            }        });    }    public void intoNormal(View view) {        Master.get().execute(SysEventService.class, new ContextRunnable<SysEventService>() {            @Override            public void run(SysEventService sysEventService) {                Param param = ProtoParam.create(SysMasterEvent.BatteryStatusData.newBuilder()                        .setLevel(30)                        .setLevelStatus(1)                        .setStatus(2)                        .build());                sysEventService.nomalPowerStatus(param);            }        });    }    public void openEyes(View view) {        EyesControlUtils.openEyes();    }    public void closeEyes(View view) {        EyesControlUtils.closeEyes();    }    public void shutDown(View view) {        AlphaUtils.shutDown(true);    }    public void sitDown(View view) {        ActionApi.get().playAction("sit_down", new com.ubtrobot.commons.ResponseListener<Void>() {            @Override            public void onResponseSuccess(Void aVoid) {                Log.i(TAG, "onResponseSuccess=======");                MotorApi.get().unlockAllMotor(null);                MotorApi.get().lockMotor(13, null);            }            @Override            public void onFailure(int i, @NonNull String s) {                Log.i(TAG, "onStartFailure=======" + s);            }        });    }    public void behaviorTest(View view) {        playStrangerEnterTts("伍禄林");    }    /**     * 播报有陌生人进来tts     *     * @param friendName     */    private void playStrangerEnterTts(String friendName) {        FaceDetectManager.Mood mood = getMood();        Log.i(TAG, "当前心情======" + mood);        String text1 = "";        String text2 = "";        String behaviorName1 = "";        String behaviorName2 = "";        if (mood == FaceDetectManager.Mood.NICE) {            text1 = "哎呦喂，还有我不认识的人";            text2 = friendName + "快给我介绍一下呀";            behaviorName1 = "w_guide_0001a";            behaviorName2 = "w_guide_0001b";        } else if (mood == FaceDetectManager.Mood.GOOD) {            text1 = "哎呦喂，还有我不认识的人";            text2 = friendName + "快给我介绍一下呀";            behaviorName1 = "w_guide_0001a";            behaviorName2 = "w_guide_0001b";        } else if (mood == FaceDetectManager.Mood.BAD) {            text1 = "哎呦喂，还有我不认识的人";            text2 = friendName + "快给我介绍一下呀";            behaviorName1 = "w_guide_0001a";            behaviorName2 = "w_guide_0001b";        }        weclomeBehaivor(text1, text2, behaviorName1, behaviorName2, new VoiceListener() {            @Override            public void onCompleted() {            }            @Override            public void onError(int errCode, String errMsg) {            }        });    }    private void weclomeBehaivor(String text1, final String text2, String expressName1,                                 final String expressName2, final VoiceListener voiceListener) {        AlphaUtils.playBehavior(expressName1, Priority.LOW, null);        VoicePool.get().playTTs(text1, Priority.NORMAL, new VoiceListener() {            @Override            public void onCompleted() {                VoicePool.get().playTTs(text2, Priority.HIGH, voiceListener);                AlphaUtils.playBehavior(expressName2, Priority.LOW, null);            }            @Override            public void onError(int i, String s) {            }        });    }    private FaceDetectManager.Mood getMood() {        int fave = EmotionStore.queryFavorByUserId(AlphaApplication.getContext().getContentResolver(), 0);        if (0 < fave && fave < 30) {            return FaceDetectManager.Mood.BAD;        } else if (30 <= fave && fave < 60) {            return FaceDetectManager.Mood.GOOD;        } else {            return FaceDetectManager.Mood.NICE;        }    }    public void getGesture(View view) {        RobotGestures.GestureType gestureType = StandUpApi.getInstance().getRobotGesture();    }    public void standUp(View view) {        ActionApi.get()                .playAction("stand_up_from_floor", new com.ubtrobot.commons.ResponseListener<Void>() {                    @Override                    public void onResponseSuccess(Void aVoid) {                        Log.i(TAG, "onResponseSuccess=======");                    }                    @Override                    public void onFailure(int i, @NonNull String s) {                        Log.i(TAG, "onStartFailure=======" + s);                    }                });    }    public void IntoWakeUp(View view) {        SysStatusManager.getInstance()                .publishSysActiveStatus(SysMasterEvent.ActivieStatusType.STANDUP_STANDBY);    }    public void IntoStandby(View view) {        SysStatusManager.getInstance()                .publishSysActiveStatus(SysMasterEvent.ActivieStatusType.SITDOWN_STANDBY);    }//    public void intoActive(View view) {//        //        SysEventApi.getInstance().publishSysActiveStatus(0);////        SysStatusManager.getInstance().init();//    }    public void bootOn(View view) {        SpeechUtils.speekOn();    }    public void dance(final View view) {        final String[] dances = {                "奥运之歌", "胜利之歌", "当哈姆莱特遇到布鲁克林", "阿拉伯半岛的苏丹", "西班牙说唱", "微笑摇摆", "一击滑落", "伦敦大桥垮下来", "我们去约会",                "铃儿响叮当", "独立摇滚手", "快乐的大脚", "路边秋千", "尽情娱乐", "拂来星", "电子地带", "做得更好", "发现", "过来玩吧", "童趣"        };        final String action_name =                dances[new Random(System.currentTimeMillis()).nextInt(dances.length)];        ActionApi.get().playAction("001", null);    }    public void getAllMotor(View view) {        List<Motion.Motor> motors = MotorApi.get().getMotorList();        for (Motion.Motor motor : motors) {            Log.i(TAG, "motor====" + motor.toString());        }    }    public void lowpowerShutdown(View view) {        LowPowerShutdowmManager.getInstance().startShutdownTimer();    }    public void stopShutdown(View view) {        LowPowerShutdowmManager.getInstance().stopShutdownTimer();    }    public void unlockAllMotor(View view) {        MotorApi.get().unlockAllMotor(null);    }    public void lockAllMotor(View view) {        MotorApi.get().lockAllMotor(null);    }    public void stopDance(View view) {        ActionApi.get().stopAction(null);    }    public void batteryVersion(View view) {        String sid = RobotState.get().getSid();        Log.w(TAG, "SID = " + sid);        Log.w("TAG", SysApi.get().readCtrlVersion());        Log.w(TAG, "" + ActionApi.get().getActionList());        // Log.w(TAG, "version = " + SysApi.get().readFirmwareVersion());    }    public void findJoke(View view) {        FindJoke.getInstance()                .requestFindJoke("CN", "1", new ResponseListener<FindJokeModule.Response>() {                    @Override                    public void onError(ThrowableWrapper e) {                        LogUtils.e(e.getMessage());                    }                    @Override                    public void onSuccess(FindJokeModule.Response response) {                        LogUtils.e(JsonUtils.object2Json(response));                    }                });        AddPhoto.getInstance()                .requestAddPhoto("A2222222222",                        "http://video.ubtrobot.com/Alpha2Photo/020201UBT27030900013/IMG_20170508_163741.jpg",                        "16", new ResponseListener<AddPhotoModule.Response>() {                            @Override                            public void onError(ThrowableWrapper e) {                            }                            @Override                            public void onSuccess(AddPhotoModule.Response response) {                                LogUtils.e("logic", JsonUtils.object2Json(response));                            }                        });    }    /**     * 字符串读取assets目录下的文件     *     * @param cxt     Context     * @param file    文件名     * @param charset 字符集     */    public static String readAssetsFile2String(Context cxt, String file, String charset) {        int len;        byte[] buf;        String result = "";        InputStream in = null;        try {            in = cxt.getAssets().open(file);            len = in.available();            buf = new byte[len];            int ret = in.read(buf, 0, len);            if (ret == len) result = new String(buf, charset);        } catch (Exception e) {            e.printStackTrace();        } finally {            CloseUtils.closeIOQuietly(in);        }        return result;    }    public void behaviorParse(View view) {        BehaviorInflater.loadBehaviorFromXml(                Constants.ACTION_PATH + File.separator + "demo_behavior.xml", new BehaviorLoadListener() {                    @Override                    public void onLoadCompleted(Behavior behavior) {                        behavior.start();                    }                });    }    public void testSTT(View view) {    }    public void testSpeech(View view) {//        Log.w(TAG, "tts speed = " + SpeechApi.get().getTTsSpeed());//        Log.w(TAG, "tts volume = " + SpeechApi.get().getTTsVolume());//        Log.w(TAG, "tts voicer = " + SpeechApi.get().getCurSpeechVoicer().getName());//        SpeechApi.get().setTTsSpeed(80, null);//        SpeechApi.get().setTTsVolume(80, null);//        SpeechApi.get().setVoicerName("NANNAN", null);        BleNetworkWifiManager bleNetworkWifiManager = new BleNetworkWifiManager(this);        WifiConfiguration wifiConfiguration = bleNetworkWifiManager.isExist("Tenda_mini");        Log.i(TAG, "wifiConfiguration======" + wifiConfiguration);    }    public void testTTS(View view) {        VoicePool.get().playTTs("哈哈哈", Priority.NORMAL, new VoiceListener() {            @Override            public void onCompleted() {            }            @Override            public void onError(int i, String s) {            }        });    }    public void testStartRecording(View view) {        SpeechApi.get().startRecording();        //        SpeechApi.get().startRecording(new PcmListener() {        //            @Override        //            public void onPcmData(Speech.Frequency frequencies, Speech.Encoding encoding, byte[] data) {        //                Log.w(TAG, "DATA = " + ConvertUtils.bytes2HexString(data));        //            }        //        //            @Override        //            public void onStartFailure(int errCode, String errMsg) {        //                Log.w(TAG, "errCode = " + errCode + ", errMsg = " + errMsg);        //            }        //        });    }    public void testStopRecording(View view) {        //        SpeechApi.get().stopRecording(null);        SpeechApi.get().stopRecording();    }    private FirmwarePackageGroup firmwarePackages;    public void checkUpgrade(View view) {        UpgradeClient.get().detectUpgrade(new UpgradeClient.StartDetectListener() {            @Override            public void onDetectSuccess(FirmwarePackageGroup firmwarePackages) {                Log.e(TAG, "detect success.");                MainActivity.this.firmwarePackages = firmwarePackages;            }            @Override            public void onDetectFailure(DetectException e) {                Log.e(TAG, "detect failure: " + e.getMessage());            }        });    }    public void downloadData(View view) {        if (firmwarePackages != null && firmwarePackages.getPackageCount() > 0) {            UpgradeClient.get()                    .tryToDownloadCommonFirmware(firmwarePackages, new UpgradeClient.StartDownloadListener() {                        @Override                        public void onStartSuccess() {                            Log.e(TAG, "start download success");                        }                        @Override                        public void onStartFailure(Exception e) {                            Log.e(TAG, e.getMessage());                        }                    });        } else {            Log.w(TAG, "no update.");        }    }    public void upgrade(View view) {        UpgradeClient.fakeSpeechUpgradeTrigger(null);    }    public void onBinding(View view) {        Log.d(TAG, " onBinding ");        final CheckBindRobotModule.Request request = new CheckBindRobotModule.Request(RobotState.get().getSid());        HttpProxy.get().doGet(request, new ResponseListener<CheckBindRobotModule.Response>() {            @Override            public void onError(ThrowableWrapper e) {                Log.d(TAG, " onError -- e : " + Log.getStackTraceString(e));            }            @Override            public void onSuccess(CheckBindRobotModule.Response response) {                Log.d(TAG, " onSuccess -- response : " + response);            }        });    }    public void openGps(View view) {        AlphaUtils.playBehavior("low-power_0002", Priority.HIGH, null);//        UbtLocationManager.getInstance().openGPSSettings(false);    }    public void firstStart(View view) {        SystemPropertiesUtils.setFirststart(true);        SystemPropertiesUtils.setFirststartStep("0");        FirstStartManager.get().playIntroduceTTs();    }    public void mockANR(View view) {        while (true) {        }    }    public void gotoJimuCarTest(View view) {        startActivity(new Intent(this, JimuCarTest.class));    }}